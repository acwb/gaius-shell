#!/bin/bash


function show_prompt {
    source /home/toto/bin/inc/prompt.sh
}




######################################


function flag {

    if [ "$1" == "-v" ] ; then
        flagstate="`cat $PATH_FLG/$2.flg`"
        gmsg Flags -l -minus "$2: $flagstate"
    else
        cat $PATH_FLG/$1.flg
    fi

}



######################################



function amsg {

    
    if [ "`flag sound`" == "on" ] ; then
        if [ "$1" == "msg" ] ; then
            pathtosound="$PATH_SND/dialog-warning.oga"
        elif [ "$1" == "bop" ] ; then
            pathtosound="$PATH_SND/message.oga"
        elif [ "$1" == "error" ] ; then
            pathtosound="$PATH_SND/error.wav"
        elif [ "$1" == "ding" ] ; then
            pathtosound="$PATH_SND/message-new-instant.oga"
        elif [ "$1" == "busy" ] ; then
            pathtosound="$PATH_SND/phone-outgoing-busy.oga"
        elif [ "$1" == "snap" ] ; then
            pathtosound="$PATH_SND/camera-shutter.oga"
        elif [ "$1" == "alarm" ] ; then
            pathtosound="$PATH_SND/alarm-clock-elapsed.oga"
        elif [ "$1" == "on" ] ; then
            pathtosound="$PATH_SND/power-plug.oga"
        elif [ "$1" == "off" ] ; then
            pathtosound="$PATH_SND/power-unplug.oga"
        elif [ "$1" == "in" ] ; then
            pathtosound="$PATH_SND/service-login.oga"
        elif [ "$1" == "out" ] ; then
            pathtosound="$PATH_SND/service-logout.oga"
        elif [ "$1" == "tuning" ] ; then
            pathtosound="$PATH_SND/25454__freqman__violin-tuning.wav"
        elif [ "$1" == "countdown" ] ; then
            pathtosound="$PATH_SND/82986__corsica-s__countdown.wav"
        elif [ "$1" == "warning" ] ; then
            pathtosound="$PATH_SND/83343__corsica-s__warning.wav"
        elif [ "$1" == "uku" ] ; then
            pathtosound="$PATH_SND/110602__turkitron__ukulele-lick-80bpm.wav"
        elif [ "$1" == "ambient" ] ; then
            pathtosound="$PATH_SND/198416__divinux__ambientbell.wav"
        elif [ "$1" == "button" ] ; then
            pathtosound="$PATH_SND/212003__pegtel__button-tap-1.mp3"
        elif [ "$1" == "ping" ] ; then
            pathtosound="$PATH_SND/215415__unfa__ping.flac"
        elif [ "$1" == "digital" ] ; then
            pathtosound="$PATH_SND/244356__soneproject__digital-life-1.wav"
        elif [ "$1" == "sorry" ] ; then
            pathtosound="$PATH_SND/254034__jagadamba__male-voice-whispering-sorry-english.wav"
        elif [ "$1" == "welcome" ] ; then
            pathtosound="$PATH_SND/254391__jagadamba__male-voice-welcome.wav"
        elif [ "$1" == "mystery" ] ; then
            pathtosound="$PATH_SND/256099__foolboymedia__mysterypeak1.wav"
        elif [ "$1" == "done" ] ; then
            pathtosound="$PATH_SND/256112__nckn__pleasant-done-notification.wav"
        elif [ "$1" == "done2" ] ; then
            pathtosound="$PATH_SND/256113__nckn__done.wav"
        elif [ "$1" == "completed" ] ; then
            pathtosound="$PATH_SND/277033__headphaze__ui-completed-status-alert-notification-sfx001.wav"
        elif [ "$1" == "levelup" ] ; then
            pathtosound="$PATH_SND/320654__rhodesmas__level-up-02.wav"
        elif [ "$1" == "connect" ] ; then
            pathtosound="$PATH_SND/322897__rhodesmas__connected-01.wav"
        elif [ "$1" == "success4" ] ; then
            pathtosound="$PATH_SND/322929__rhodesmas__success-04.wav"
        elif [ "$1" == "seccess3" ] ; then
            pathtosound="$PATH_SND/322930__rhodesmas__success-03.wav"
        elif [ "$1" == "incorrect" ] ; then
            pathtosound="$PATH_SND/322931__rhodesmas__incorrect-01.wav"
        elif [ "$1" == "coin" ] ; then
            pathtosound="$PATH_SND/coin.mp3"
        elif [ "$1" == "ploc" ] ; then
            pathtosound="$PATH_SND/audio-volume-change.oga"    
        else    
            pathtosound="$PATH_SND/dialog-information.oga"
        fi
        paplay $pathtosound &
    fi
}

######################################

function gmsg {

    # le 1er paramètre est forcément le sender
    msgsender=$1
    
    # si on a -l en second paramètre, on revient à la ligne après le msg
    if [ "$2" == "-l" ] ; then
        newline="echo"
        # si derrière le -l on a un -n
        if [ "$3" == "-n" ] ; then
            msgtype=$4
            msgtxt=$5
            msgnotif="1"
        else 
            msgtype=$3
            msgtxt=$4
            msgnotif="0"
        fi
    # si on a pas de -l mais un -n en 2e paramètre, on ajoute l'option notif de bureau
    elif [ "$2" == "-n" ] ; then
        newline=""
        msgtype=$3
        msgtxt=$4
        msgnotif="1"
    # si on a ni -l ni -n, le 2e paramètre est le type de msg
    else
        newline=""
        msgtype=$2
        msgtxt=$3
        msgnotif="0"
    fi

    
    # couleur en fonction du type
    if [ "$msgtype" == "-notice" ] ; then  
        msgcolor="$BLEU1" 
        msgsound="ploc"
    elif [ "$msgtype" == "-warn" ] ; then 
        msgcolor="$ROUGE2" 
        msgsound="warning"
    elif [ "$msgtype" == "-error" ] ; then 
        msgcolor="$ROUGE1"
        msgsound="error"
    elif [ "$msgtype" == "-echec" ] ; then 
        msgcolor="$ROUGE2"
        msgsound="sorry"
    elif [ "$msgtype" == "-ok" ] ; then 
        msgcolor="$VERT1" 
        msgsound="done2"
    elif [ "$msgtype" == "-do" ] ; then 
        msgcolor="$MAGENTA1" 
        msgsound="tap"
    elif [ "$msgtype" == "-minor" ] ; then 
        msgcolor="$GRIS1"  
        msgsound="tap"
    elif [ "$msgtype" == "-ask" ] ; then 
        msgcolor="$CYAN2"  
        msgsound="ding"
    elif [ "$msgtype" == "-askauto" ] ; then 
        msgcolor="$CYAN1"  
        msgsound="ding"
    elif [ "$msgtype" == "-say" ] ; then 
        msgcolor="$JAUNE1"  
        msgsound="bop"
    elif [ "$msgtype" == "-cmd" ] ; then 
        msgcolor="Commande\e[1m"  
        msgsound="tap"
    elif [ "$msgtype" == "-none" ] ; then 
        msgcolor="$GRIS2" 
        msgsound=""
    else 
        msgcolor="" 
        msgsound=""
    fi
    
    
    # execution de la ligne
    
        # si paramètre, message en mode notif desktop
        if [ "$msgnotif" == "1" ] ; then 
            notify-send "${msgsender}:" "${msgtxt}"
        fi
        

        # message en mode console
        echo -n -e "$msgcolor $BOLD$msgsender →$RESET $msgtxt"
        $newline
        if [ "$msgsound" != "" ] ; then 
            amsg $msgsound
        fi
}

######################################

function runcmd {
    
    # vérification existance script et lancement
    if test -f "$PATH_CMD/$1"; then 
        # affichage de l'éventuel en tête helper
        if test -f "$PATH_HLP/$1.nfo"; then 
            echo
            echo -n -e "$FNOIR$GRIS1"
            echo -e "******************************************************************** "
            gmsg $1 -cmd ""
            echo -n -e "$FNOIR$GRIS1"
            cat $PATH_HLP/$1.nfo ; 
            echo
            echo -n -e "$FNOIR$GRIS1"
            echo -e "******************************************************************** $RESET"
            echo
        else 
            debugmsg "TODO: La commande $1 n'a pas encore de description." ;
        fi 
        # lancement du script
        source $PATH_CMD/$1 ; 
    else
        nblettres=${#1}
        if [ "$nblettres" -ge "3" ] ; then
            echo
            gmsg Gaia -l -error "Erreur: la commande $1 n'existe pas."
            read -t 2 -s -n 1 -p "Execution de la commande dans le shell ? (o)" confirmdel 
            if [[ $confirmdel =~ ^[oO]$ ]] ; then 
                echo
                echo
                eval $reps
            fi
        fi
        echo
    fi
}


######################################

function pingfbx { 
    ping -q -w 1 -c 1 `ip r | grep default | cut -d ' ' -f 3` > /dev/null  && return 0 || return 1  
}




######################################

function debugmsg {

    if [ "`flag debug`" == "on" ] ; then
        gmsg Debug -l -minor "$1"
    fi
}

######################################

# compte le nombre d'entrées dans les fichiers todo/todl..

function countentries {
    grep -o "~" $1 | wc -l 
}

######################################

function testconnex {
    if [ "$1" == "-v" ] ; then
        if pingfbx "1" ; then
            gmsg Freebox -l -ok "Connecté à $CURRENTWIFI sous l'IP $LOCALIP"
            ISONLINE="1"
        else
            gmsg Freebox -l -error "Connexion indisponible"
            ISONLINE="0"
        fi
    else
        if pingfbx "0" ; then
            gmsg Freebox -l -error "Connexion indisponible"
            ISONLINE="0"
        else
            ISONLINE="1"
        fi
    fi
    
    if [ "$ISONLINE" == "0" ] ; then
        gmsg Gaia -notice "Continuer en mode Offline ? (o/N)"
        read -p " " -n 1 -r -t 3
            if [[ $REPLY =~ ^[oO]$ ]] ; then
                echo
                gmsg Gaia -l -warn "Ok then.."
            else
                echo
                gmsg Gaia -l -do "Annulation"
            fi 
    fi
}



######################################

function extract {


    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1        ;;
            *.tar.gz)    tar xvzf $1     ;;
            *.bz2)       bunzip2 $1       ;;
            *.rar)       unrar x $1     ;;
            *.gz)        gunzip $1     ;;
            *.tar)       tar xvf $1        ;;
            *.tbz2)      tar xvjf $1      ;;
            *.tgz)       tar xvzf $1       ;;
            *.zip)       unzip $1     ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1    ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

######################################


function open_webapp { 
    BROWSER="$1"
    NAME="$2"
    URL="$3"
    nohup $BROWSER --app=$URL &> /dev/null
    gmsg Gaia -ok "Ouverture de $NAME dans $BROWSER"
    guake -t
}
